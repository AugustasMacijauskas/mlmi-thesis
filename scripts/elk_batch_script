#!/bin/bash

#SBATCH -A trlx
#SBATCH -p g40
#SBATCH --nodes=1
#SBATCH --gpus=8
#SBATCH --cpus-per-gpu=12
#SBATCH -J augustas-thesis
#SBATCH --time=02:30:00
#SBATCH --mail-type=NONE


# ----------------------------------------
# 
# My own code starts below
# 
# ----------------------------------------


# ----------------------------------------
# Environment configuration
# ----------------------------------------
export ELK_DIR="/fsx/home-augustas/VINC-logs"
source /admin/home-${USER}/.bashrc
conda env list | grep "*"
python --version


# ----------------------------------------
# Configuring GPUs
# ----------------------------------------
cuda_devices=$(echo $CUDA_VISIBLE_DEVICES)  # Store the value of CUDA_VISIBLE_DEVICES in a variable
echo "CUDA_VISIBLE_DEVICES: $cuda_devices"

num_gpus=$(echo $cuda_devices | awk -F, '{print NF}')
echo "num_gpus: $num_gpus"

nvidia-smi --query-gpu=gpu_name --format=csv,noheader | head -n 1


# ----------------------------------------
# Launch the job
# ----------------------------------------
workdir="$SLURM_SUBMIT_DIR"
cd $workdir

JOBID=$SLURM_JOB_ID
echo -e "JobID: $JOBID\n======"
echo "Time: `date`"
echo "Running on master node: `hostname`"
echo "Current directory: `pwd`"


# ----------------------------------------
# Save path
# ----------------------------------------
now=$(date "+%Y%m%d_%H%M%S")
# version="v1"
# keyword="UQA-3b-custom_data_imdb_${version}_single_new_$template_number"
# keyword="UQA-11B-v2-qnli-vicuna-${version}_training_size"
# keyword="UQA-11B-v2-training_size_qnli"
# keyword="UQA-3B-v2-encoder"
# keyword="UQA-11B-v2"
keyword="UQA-varied-cv"

save_path="logs_elk/${keyword}_${now}_${JOBID}"
cd ..
mkdir $save_path
cd $workdir


# ----------------------------------------
# Model
# ----------------------------------------
# model="gpt2-xl"
# model="allenai/unifiedqa-v2-t5-small-1363200"
# model="allenai/unifiedqa-v2-t5-base-1363200"
# model="allenai/unifiedqa-v2-t5-large-1363200"
# model="allenai/unifiedqa-v2-t5-3b-1363200"
model="allenai/unifiedqa-v2-t5-11b-1363200"
# model="allenai/unifiedqa-t5-11b"
echo "Model: $model"


# ----------------------------------------
# Dataset
# ----------------------------------------
# dataset="ag_news"
# dataset="amazon_polarity"
# dataset="super_glue:boolq"
# dataset="super_glue:copa"
# dataset="dbpedia_14"
# dataset="imdb"
# dataset="piqa"
# dataset="glue:qnli"
# dataset="super_glue:rte"
# dataset="AugustasM/burns-datasets-VINC-$version"
# dataset="AugustasM/burns-datasets-VINC-imdb-$version"
# dataset="AugustasM/qnli-vicuna-$version"
# dataset="AugustasM/burns-datasets-VINC-v4"
# dataset="AugustasM/burns-datasets-VINC-imdb-v2"
dataset="AugustasM/qnli-vicuna-v1"
# dataset="AugustasM/wrapped-piqa-$version"
echo "Dataset: $dataset"


# ----------------------------------------
# Template
# ----------------------------------------
template_path="AugustasM/burns-datasets-VINC"
# template_path="AugustasM/burns-datasets-VINC/first"
# template_path="AugustasM/burns-datasets-VINC/all"
echo -e "Template path: $template_path\n"


# ----------------------------------------
# Reporter (used for eval only)
# ----------------------------------------
# reporter_path="allenai/unifiedqa-v2-t5-3b-1363200/AugustasM/burns-datasets-VINC-imdb-v2/gracious-mendeleev"
# reporter_path="allenai/unifiedqa-v2-t5-3b-1363200/AugustasM/burns-datasets-VINC-imdb-v2/happy-clarke"
# reporter_path="allenai/unifiedqa-v2-t5-3b-1363200/AugustasM/burns-datasets-VINC-imdb-v2/musing-murdock"


# ----------------------------------------
# Launch the command
# ----------------------------------------
application="elk"

# options=$1
# --net.seed=0 --data.seed=0 --num_shots=1 --disable_cache --max_examples 1000 2000
# --supervised {none,single,inlp,cv}
# --prompt_indices $template_number \

options="elicit $model $dataset \
    --num_gpus=$num_gpus --min_gpu_mem=0 \
    --supervised cv \
    --template_path=$template_path \
    --max_examples 10000 6000 \
"
    # --disable_cache \
    # --prompt_indices 4 \
    # --use_encoder_states \
    # --net ccs

# options="eval $reporter_path $model $dataset \
#     --num_gpus=$num_gpus --min_gpu_mem=0 \
#     --template_path=$template_path \
#     --max_examples 1000 2000 \
#     --disable_cache \
#     --prompt_indices 1 \
# "

out_file_path="../$save_path/out.$JOBID"
CMD="$application $options > $out_file_path"

# Log the start time and execute the command
start=`date +%s`
cd ../elk
echo -e "\nExecuting command:\n==================\n$CMD\n"
eval $CMD


# ----------------------------------------
# Move the output file
# ----------------------------------------
cd ../mlmi-thesis
echo -e "\nMoving file slurm-$JOBID.out to $save_path"
mv slurm-$JOBID.out ../$save_path


# ----------------------------------------
# Create a results file
# ----------------------------------------
python src/utils/get_results.py --file_path=$out_file_path


# ----------------------------------------
# Log the duration
# ----------------------------------------
end=`date +%s`
duration=$((end-start))
duration=`date -u -d @${duration} +"%T"`
echo -e "\nRuntime: $duration"
